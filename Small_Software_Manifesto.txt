Manifesto for Small Software Development


* Big binary is unacceptable. 
* Big runtime is unacceptable.
* Huge dependency is unacceptable.
* Boring configuration is unacceptable.


Big software waste time to maintain, waste big storage and runtime memory, 
waste energy, waste time to upload and download. It's waste people's life! 
Waste resource of the planet!


Small Story
-----------------------------
Today, yes, it's Oct 25, 2025.

I compiled a small tool software with so-said mainstream fashion programming 
languages and I don't want to mention their names, both of them requires to 
download dozens of modules and then run the compile work, I don't want to say 
how bad the time wasted by downloading and compile, and many people groups on 
the planet actually can't access internet as normal, made me angry again is the
compiled result! the compiled binary is completely out of all my imagination! 
they both produced megabytes of binary! but the same function implemented with 
C produced binary is only several kilobytes! let alone those storages invaded 
by their dependent modules! 


OMG! it's year 2025!
Is there any big names talking about small software development, instead of 
so-said AI technologies! AI is harming earth! Just like those satellites!


Infinitely Loop
-----------------------------
It's ridiculous in soft industry, inventing new programming language or new 
technology to resolve problem, but bring more big problems to resolve and then 
inventing again to resolve the problems and bring more big problems again, 
loop, and loop. They do more, more crime they committed.


Value C Programming Again
-----------------------------
Yes, C is not safe, several common pitfalls of C programming listed as the 
following:

* Unfreed memory
* Memory leak
* Buffer overflow
* Infinity loop
* Unclosed file descriptor (including socket)
* Array border access exceeded 
* NULL pointer (use after free)
* Invalid void pointer casting
* Uninitialized variables
* Uncaptured error handling
* Not validating user input
* Misused number data type
* Compare unsigned integer with negative number
* Stack overflow
* Non-reentrant function called by multiple threads
* Multiple function called by logical deadlock
* ...


C++ and others have more pitfalls than C. There is not existing a perfect 
programming language, absolutely safe programming language in the world to 
guarantee the safety and reliability of software system, safety and 
reliability depends on people, not the programming language or system itself.  


First known how to write close and free and then try open and malloc, ensure 
clean first and then do something is the philosophy and bits of C programming, 
also the philosophy of a nature life, a person of culture. This rule is also 
suitable to other languages. First known how to write functional component 
(console utilities instead of GUI) and then try add user interface to it is
an important missing rule for most of software developers. less is better than 
more, features that can be removed to make the distribution smaller is another
rule that be ignored too more.


Rapid development hurt the software industry!
Beautiful strong buildings are based on hard works, but not sands like 
lazy works! C is hard and not safe but it is the strongest programming 
language and the most strongest softwares were written with it, including 
operation system and the most important infrastructure of internet and software
industry. C is top professionals' language, a mature developer may need ten 
years to really write software with it even it looks simple at the first 
glance. If you know nothing about C, that means you know nothing about 
programming. If you can't write quality C code, that means you're not a real 
programmer. Most developer have never written a real C software in their entire
life. Experienced C developer and C ninja are rare and rare, big monster 
software more and more, big rubbish more and more, they produce rubbish based 
on rubbish, because only a few people can persistently walk on the way beset 
with difficulties to be proficient in C programming, but it's the Tao and 
Kung Fu of programming. C is really unsafe and really difficult to master, 
to be a mature C developer or an C expert, a developer needs many years to 
continually experience it. Programming is difficult, there is no shortcuts for 
programming. There is no absolutely safe and reliable programming language or 
system to replace the work of people. The product quality of the software 
industry is directly proportional to the number of experienced C programming 
experts.


Why say no to big softwares? 
-----------------------------
Please refer above manifesto. Every desktop developer should known one thing, 
the embedded system developers sometime even fighting for one byte of storage 
in some situation. They never think about memory and storage like embedded 
system developers and produce rubbish based on big rubbish, so more and more 
big monster there. Emphasise small software development is never too much!



